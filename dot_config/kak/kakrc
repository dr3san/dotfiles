colorscheme gruvbox-dark

set-option -add global autoinfo normal
set-option global ui_options terminal_assistant=none

set-option global tabstop     4
set-option global indentwidth 4
set-option global scrolloff   5,10

# Do not use alphas for navigation
# map global normal j ? # TODO: Find use for this key
# map global normal J ? # TODO: Find use for this key
# map global normal h ? # TODO: Find use for this key
# map global normal H ? # TODO: Find use for this key
# map global normal k ? # TODO: Find use for this key
# map global normal K ? # TODO: Find use for this key
# map global normal L ? # TODO: Find use for this key
map global normal 'l'          'x'

map global normal '<end>'      'gl'
map global normal '<home>'     'gh'
map global normal '<pageup>'   '<c-u>'
map global normal '<pagedown>' '<c-d>'

map global normal 'v'          '<a-i>'
map global normal 'V'          '<a-a>'
map global normal '<minus>'    '<a-;>'

# Move lines up/down -- works with single selection.
map global normal '<a-up>'     'x"aZy<a-;>kPZ"azdz'
map global normal '<a-down>'   'xdp'

map global goto '<left>'   '<esc>:buffer-previous<ret>'
map global goto '<right>'  '<esc>:buffer-next<ret>'

# User mode mappings
map -docstring "yank the selection into the clipboard" global user y "<a-|> wl-copy<ret>"
map -docstring "paste the clipboard"                   global user p "<a-!> wl-paste<ret>"

add-highlighter global/ number-lines -hlcursor
add-highlighter global/ show-matching
add-highlighter global/ regex \h+$ 0:Error
add-highlighter global/ wrap -word -indent

# set cursor to underline
hook global InsertIdle .* %{
  set-face window PrimaryCursor      default,default+u
  set-face window PrimaryCursorEol   default,default+u
  set-face window SecondaryCursor    default,default+u
  set-face window SecondaryCursorEol default,default+u
  set-face window PrimarySelection   default,default
  set-face window SecondarySelection default,default
}

# set cursor to default
hook global NormalIdle .* %{
  unset-face window PrimaryCursor
  unset-face window PrimaryCursorEol
  unset-face window SecondaryCursor
  unset-face window SecondaryCursorEol
  unset-face window PrimarySelection
  unset-face window SecondarySelection
}

evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload
plug "andreyorst/fzf.kak" config %{
    map global user 'f' ':fzf-mode<ret>'
} demand fzf %{
    set-option global fzf_use_main_selection false
} demand fzf-file %{
    set-option global fzf_highlight_command bat
}

evaluate-commands %sh{kak-lsp}
lsp-enable

map global user l       ':enter-user-mode lsp<ret>'                                  -docstring 'LSP mode'
map global object a     '<a-semicolon>lsp-object<ret>'                               -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>'                               -docstring 'LSP any symbol'
map global object f     '<a-semicolon>lsp-object Function Method<ret>'               -docstring 'LSP function or method'
map global object t     '<a-semicolon>lsp-object Class Interface Struct<ret>'        -docstring 'LSP class interface or struct'
map global object d     '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D     '<a-semicolon>lsp-diagnostic-object<ret>'                    -docstring 'LSP errors'
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
